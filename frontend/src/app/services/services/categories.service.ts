/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CategoryResponse } from '../models/category-response';
import { deleteCategoryById } from '../fn/categories/delete-category-by-id';
import { DeleteCategoryById$Params } from '../fn/categories/delete-category-by-id';
import { getAllCategory } from '../fn/categories/get-all-category';
import { GetAllCategory$Params } from '../fn/categories/get-all-category';
import { getCategoryById } from '../fn/categories/get-category-by-id';
import { GetCategoryById$Params } from '../fn/categories/get-category-by-id';
import { newCategory } from '../fn/categories/new-category';
import { NewCategory$Params } from '../fn/categories/new-category';
import { updateCategory } from '../fn/categories/update-category';
import { UpdateCategory$Params } from '../fn/categories/update-category';

@Injectable({ providedIn: 'root' })
export class CategoriesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllCategory()` */
  static readonly GetAllCategoryPath = '/categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCategory$Response(params?: GetAllCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CategoryResponse>>> {
    return getAllCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCategory(params?: GetAllCategory$Params, context?: HttpContext): Observable<Array<CategoryResponse>> {
    return this.getAllCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CategoryResponse>>): Array<CategoryResponse> => r.body)
    );
  }

  /** Path part for operation `updateCategory()` */
  static readonly UpdateCategoryPath = '/categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCategory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategory$Response(params: UpdateCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryResponse>> {
    return updateCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCategory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategory(params: UpdateCategory$Params, context?: HttpContext): Observable<CategoryResponse> {
    return this.updateCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryResponse>): CategoryResponse => r.body)
    );
  }

  /** Path part for operation `newCategory()` */
  static readonly NewCategoryPath = '/categories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `newCategory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  newCategory$Response(params: NewCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryResponse>> {
    return newCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `newCategory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  newCategory(params: NewCategory$Params, context?: HttpContext): Observable<CategoryResponse> {
    return this.newCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryResponse>): CategoryResponse => r.body)
    );
  }

  /** Path part for operation `getCategoryById()` */
  static readonly GetCategoryByIdPath = '/categories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCategoryById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCategoryById$Response(params: GetCategoryById$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryResponse>> {
    return getCategoryById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCategoryById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCategoryById(params: GetCategoryById$Params, context?: HttpContext): Observable<CategoryResponse> {
    return this.getCategoryById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryResponse>): CategoryResponse => r.body)
    );
  }

  /** Path part for operation `deleteCategoryById()` */
  static readonly DeleteCategoryByIdPath = '/categories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCategoryById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategoryById$Response(params: DeleteCategoryById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCategoryById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCategoryById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategoryById(params: DeleteCategoryById$Params, context?: HttpContext): Observable<void> {
    return this.deleteCategoryById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
